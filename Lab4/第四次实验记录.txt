<p align="center" style="font-family:SimSun;font-size:18px">冯亚林 191850036 南京大学软件学院</p>

# 1.实验目标

1.1 添加系统调用，让进程在定时内不被分配时间片

1.2 添加系统调用，打印 char* 型参数

> <img src="第四次实验记录.assets/image-20211223143021090.png" alt="image-20211223143021090" style="zoom:50%;" />

1.3 模拟读者写者问题

> <img src="第四次实验记录.assets/image-20211223142951603.png" alt="image-20211223142951603" style="zoom:67%;" />



# 2.实验信息

### 2.0 实验平台

主机win10上开发；

虚拟机ubuntu18.04（x86_64架构)上编译链接，并将二进制的可执行代码写入镜像文件a.img，并运行硬件级虚拟机bochs；

由bochs 来运行我们写出来的“伪操作系统”，也就是包含可执行程序的镜像a.img；



### 2.1 选用框架: 第七章m



### 2.2 开始实验的思路

阅读《orange's》第六章和第七章的部分内容，然后尝试开始完成第一个目标，添加系统调用让进程休眠，不被分配时间片。

然后照葫芦画瓢，写出 print;

对于读者写者问题，首先弄明白整个项目的执行流程（主要是时钟中断处理程序clock_handler和调度算法schedule），然后写出信号量和PV操作的数据结构（定义清晰的API），写出6个进程的雏形，然后依次分析和完成读者优先算法、写者优先、读写公平这三种算法，在算法完成的过程中还要考虑定义哪些信号量、如何初始化等等。

过程中的一些细节问题，比如清屏，比如如何彩色打印进程信息，比如makefile，比如bochs的时间配置等等，在实验时慢慢解决。



# 3.修改makefile

将第七章m源码复制粘贴过来，首先修改makefile，以让原项目能直接运行起来。

### 3.1  64位虚拟机上支持32位模式的编译和链接

> <img src="第四次实验记录.assets/image-20211223143529116.png" alt="image-20211223143529116" style="zoom:67%;" />



### 3.2  make run命令和挂载目录

> <img src="第四次实验记录.assets/image-20211225154608243.png" alt="image-20211225154608243" style="zoom:67%;" />



做出以上三处修改以后，在该目录打开的终端里，输入make run，再输入c，退出bochs的调试模式，发现bochs运行正常。

# 4.清屏功能 clear

在Lab3中已经写过一次清屏功能了，本来想抄自己以前写的clear()，但这次实验**没有要求游标跟随输出**，如果不设置游标，可以直接在显存上修改，直接把显存全部改成空格，非常简单。

这里的全局变量 disp_line 负责记录输出的行数，一个屏幕输出 25 * 80个字符，即最多25行，超过25行就在时钟中断模块里调用clear()清屏。

> <img src="第四次实验记录.assets/image-20211225144105158.png" alt="image-20211225144105158" style="zoom:50%;" />



# 5.系统调用 sleep

### 5.1  添加系统调用的八股文

根据书第二版295页，添加系统调用 **foo** 的过程如下：

| 步骤 | 内容                                                   | 文件        |
| ---- | ------------------------------------------------------ | ----------- |
| 1    | NR_SYS_CALL加一                                        | const.h     |
| 2    | sys_call_table[]增加一个成员sys_foo                    | global.c    |
| 3    | sys_foo函数体定义                                      | 不确定      |
| 4    | sys_foo函数声明                                        | proto.h     |
| 5    | foo的函数声明                                          | proto.h     |
| 6    | _NR_foo的定义                                          | syscall.asm |
| 7    | foo的函数体                                            | syscall.asm |
| 8    | global foo 导出foo 这个函数标识符                      | syscall.asm |
| 9    | 如果参数个数与以前的系统调用相比有增加，要修改sys_call | kernel.asm  |

**其中相对麻烦的不过就是步骤3和6**，其他都是照本宣科。

按照上面的9个步骤，添加系统调用sleep,值得注意的是系统调用sleep除eax外，只接受1个参数milli_seconds，而之前的系统调用get_ticks不需要参数，所以步骤9是需要的，不需要修改sys_call;

> 步骤3： sys_sleep可以先在定义时忽略函数体，把其他的写好；
>
> <img src="第四次实验记录.assets/image-20211224091124417.png" alt="image-20211224091124417" style="zoom:50%;" />
>
> 步骤6、7、8：
>
> <img src="第四次实验记录.assets/image-20211225144352455.png" alt="image-20211225144352455" style="zoom:50%;" />
>
> <img src="第四次实验记录.assets/image-20211225144338705.png" alt="image-20211225144338705" style="zoom:50%;" />
>
> 写好其他的以后，思考如何写函数体？如何实现在调用sleep以后，在milli_seconds毫秒内不被分配时间片？
>
> 显然，可以让它记录一些值——sleep_ticks，休眠多少时间，然后直接通过调度算法，把时间片分给其他进程。



#### 修改kernel.asm里的sys_call

它虽然调用了save保存寄存器的值，但是如果你仔细看save，save没有保存ebx、ecx、edx等的值！尤其是ebx的重要性不言而喻，这里如果不这样做，后面那各种奇怪报错你都看不懂（受害者现身说法！QAQ）

> save：
>
> <img src="第四次实验记录.assets/image-20211225162310708.png" alt="image-20211225162310708" style="zoom:50%;" />
>
> syscall:
>
> <img src="第四次实验记录.assets/image-20211225162234711.png" alt="image-20211225162234711" style="zoom:50%;" />



### 5.2 实现sys_sleep——直接调用schedule分配时间片给其他进程

以下是我的实现思路：

1.修改PCB，增加新成员变量sleep_ticks，根据毫秒数milli_seconds算出要休眠多少个tick；

2.进程调用系统调用sleep中，需要给进程的sleep_ticks赋值，然后立刻调用调度器

3.修改调度算法，避免分配给sleep时间片

4.修改时钟中断函数，每个系统时钟过去，休眠进程的sleep_ticks减一

5.调整main中，进程的初始化语句

> 1.修改PCB，增加新成员变量sleep_ticks，根据毫秒数算出要休眠多少个tick；在proc.h中
>
> <img src="第四次实验记录.assets/image-20211225143924922.png" alt="image-20211225143924922" style="zoom:50%;" />
>
> 2.完成sys_sleep，给进程的sleep_ticks赋值，然后立刻调用调度器
>
> <img src="第四次实验记录.assets/image-20211225144506441.png" alt="image-20211225144506441" style="zoom:50%;" />
>
> 3.修改调度算法
>
> 原来的调度算法的核心是 进程的"**ticks**"，每次循环选出ticks最大的进程，如果所有ticks都是0，那就用priority重置他们的ticks。
>
> 在这里加入了 处理 休眠进程的相关语句。
>
> <img src="第四次实验记录.assets/image-20211225171547215.png" alt="image-20211225171547215" style="zoom:50%;" />
>
> 4.修改时钟中断函数，每个系统时钟过去，休眠进程的sleep_ticks减一
>
> <img src="第四次实验记录.assets/image-20211225171930717.png" alt="image-20211225171930717" style="zoom:50%;" />
>
> 5.调整main中，进程的初始化语句
>
> <img src="第四次实验记录.assets/image-20211225171702575.png" alt="image-20211225171702575" style="zoom:50%;" />



### 5.3 测试sleep——没问题哦！

> 代码：
>
> <img src="第四次实验记录.assets/image-20211225171756216-16434491092082.png" alt="image-20211225171756216" style="zoom:50%;" />

结果：一切正常！ C C A B C C A B一轮2个C，我们的实现是正确的！

> 
>
> <img src="第四次实验记录.assets/image-20211225171916295.png" alt="image-20211225171916295" style="zoom:50%;" />





# 6.封装系统调用print

实现没有什么可说的，封装以后调用即可；

> <img src="第四次实验记录.assets/image-20211224103437421.png" alt="image-20211224103437421" style="zoom:50%;" />
>
> <img src="第四次实验记录.assets/image-20211225144658385.png" alt="image-20211225144658385" style="zoom:50%;" />

问题出在调用以后的结果：



### 6.1 测试my_print 遇到乱码问题

如果把要输出的字符串放在**char数组**里，那么无论用 disp_str（进程A） 还是用my_print（进程B） 都没有问题，说明我们实现的**my_print没有错**：

> <img src="第四次实验记录.assets/image-20211225164534082.png" alt="image-20211225164534082" style="zoom:50%;" />
>
> 结果：
>
> <img src="第四次实验记录.assets/image-20211225164610456.png" alt="image-20211225164610456" style="zoom:50%;" />



但如果是传参时使用**literal stirng（字面量字符串）和char* **，**则会导致乱码：**

> **代码：**
>
> <img src="第四次实验记录.assets/image-20211225165323778.png" alt="image-20211225165323778" style="zoom:50%;" />
>
> **运行结果：**
>
> 一开始：
>
> <img src="第四次实验记录.assets/image-20211225165440543.png" alt="image-20211225165440543" style="zoom:50%;" />
>
> 进程运行了一会儿：
>
> <img src="第四次实验记录.assets/image-20211225165500471.png" alt="image-20211225165500471" style="zoom:50%;" />



### 6.2 分析乱码问题

我后面还进行了几组对照实验，确定只有在调用disp_str(或封装的my_print)时，只有使用明确写好了的char[]数组，才能正确打印。

**原因可能是**，当用char[]数组传参时，能明确地写到 **'\0'** 这个字符。而用char*或字面量时，可能因为原框架的一些地方，在调用函数时没有保存所有寄存器的值，导致打印函数实际执行时，有些寄存器的值可能发生了改变，导致\0字符可能丢失或者起始打印的位置不对，因而导致乱码。

我还和室友gzk讨论了一下这个问题，他无论传字面量、char*、char[]都没有问题，而他的disp_str、my_print实现跟我几乎一模一样，没有大的不同，那么为什么他没有遇到乱码问题了？

原来他的**虚拟机是ubuntu16.04 x86_32架构，是32位的！而我的虚拟机是64位的，虽然在makefile里写了一堆自己看不太懂的elf32、-m32、elf_i386这些，但这些肯定不能完全消除平台差异。**

**这个乱码问题几乎可以确信与虚拟机的指令集架构有关。**



### 6.3 应对乱码问题——摆烂我最在行了

最好的办法当然是完全找出这个乱码问题并修复，但确实困难，我选择“适应”这个bug。

> QAQ菜鸡是这样的，解决不了，我就逃避。

既然如此，那么输出之前就必须用char[]数组写好要输出的字符串！





# 7.信号量和PV数据结构

信号量数据结构：

> 队列是PROCESS*类型，需要head和tail指示头尾
>
> <img src="第四次实验记录.assets/image-20211224113820806.png" alt="image-20211224113820806" style="zoom:50%;" />

PV操作：

> 以系统调用的方式实现，内核态的sys_P和sys_V中有几个值得注意之处:
>
> 1.除了初始化，只有在这里才能修改信号量的值
>
> 2.原子性
>
> 3.head和tail在增加时通过 取余 ，实现 “循环队列”的特性
>
> <img src="第四次实验记录.assets/image-20211226031416666.png" alt="image-20211226031416666" style="zoom:50%;" />

# 8.<实验核心>读者写者准备

### 8.1 添加进程

根据书206页，添加一个进程步骤有：

| 序号 | 内容                                                         | 文件     |
| ---- | ------------------------------------------------------------ | -------- |
| 1    | 添加进程体                                                   | main.c   |
| 2    | task_table添加进程                                           | global.c |
| 3    | 定义任务堆栈和修改宏中的任务数 NR_TASKS、栈的总大小STACK_SIZE_TOTAL | proc.h   |
| 4    | 函数声明                                                     | proto.h  |
| 5    | 完善进程体或者修改main的初始化语句                           | main.c   |

根据以上步骤，写出6个进程体的原型：

> 读者：
>
> <img src="第四次实验记录.assets/image-20211225145012680.png" alt="image-20211225145012680" style="zoom:50%;" />
>
> 写者：
>
> <img src="第四次实验记录.assets/image-20211225145057036.png" alt="image-20211225145057036" style="zoom:50%;" />
>
> 普通进程F：
>
> <img src="第四次实验记录.assets/image-20211225145047018.png" alt="image-20211225145047018" style="zoom:50%;" />
>
> global.c:
>
> <img src="第四次实验记录.assets/image-20211225145247262.png" alt="image-20211225145247262" style="zoom:50%;" />
>
> proc.h:
>
> <img src="第四次实验记录.assets/image-20211225145221083.png" alt="image-20211225145221083" style="zoom:50%;" />



#### 小trick：灵活切换读者写者算法

因为PPT要求

> – 请分别实现 读者优先 和 写者优先 ，需要都能够支持，并且可以现场修改 
>
> – 请想办法解决此问题中部分情况下的进程饿死问题（可参考第六章）

为了能灵活地在几个算法中切换，

我在读者reader()和写者writer()进程中，用了**switch-case + 宏变量** 来**判断选用哪个算法**，多了一层抽象，减少了一些重复代码。

> <img src="第四次实验记录.assets/image-20211225152227886.png" alt="image-20211225152227886" style="zoom:50%;" />



### 8.2 算法和信号量分析

根据老师的PPT，为了实现读者优先和读写公平，我们最少需要：

| 名称      | 类型   | 作用                                |
| --------- | ------ | ----------------------------------- |
| rmutex    | 信号量 | 读者互斥，保证修改readcount是安全的 |
| readcount | int    | 读者进程数                          |
| wmutex    | 信号量 | 写入锁，实现读写互斥和写写互斥      |
| S         | 信号量 | 实现读写公平的信号量                |

<img src="第四次实验记录.assets/image-20211225145919475.png" alt="image-20211225145919475" style="zoom: 50%;" />

<img src="第四次实验记录.assets/image-20211225145937483.png" alt="image-20211225145937483" style="zoom:50%;" />



我写者优先的算法思想是：

​	既然在读者优先里第一个读进程获取了写入锁wmutex，最后一个读进程才释放wmutex，导致了读者优先，那么要实现写者优先，就可以额外增加一个**新的互斥信号量 write_first**。

​	 第一个写进程获取write_first，最后一个写进程释放write_first，让读进程全部阻塞在 这个锁write_first上。

​	为了实现信号量write_first的效果，**要体现“第一个写进程” “最后一个写进程”，那就必须记录写进程的个数，又需要一个int型变量writer_num**；

​	要保证并发过程中writer_num的数据安全，又必须需要**一个新的互斥量swrite**来对它进行控制。



此外，PPT还有要求：

> 多个读者可以读一本书，但是不能太多，上限数字有 1、2、3，需要都能够支持， 并且可以现场修改

也就是还要再加一个**信号量 max_reader，限制读文件的读进程个数**。



### 8.3 我的信号量与相关变量定义

综上，我的信号量相关变量共定义了以下几个：

| 变量        | 类型       | 作用                               |
| ----------- | ---------- | ---------------------------------- |
| rw          | 信号量     | 读写互斥、写写互斥                 |
| sread       | 信号量     | 读者互斥，保证reader_num的数据安全 |
| swrite      | 信号量     | 写者互斥，保证writer_num的数据安全 |
| max_reader  | 信号量     | 最大读者信号量                     |
| write_first | 信号量     | 实现写者优先算法，写者优先锁       |
| equal_S     | 信号量     | 实现读写公平算法，读写公平锁       |
| reader_num  | 非负整数   | 读者进程数                         |
| writer_num  | 非负整数   | 写者进程数                         |
| sem_table   | 信号量数组 | 便于初始化信号量的值               |

> 文件global.h中的声明:
>
> <img src="第四次实验记录.assets/image-20211225151110544.png" alt="image-20211225151110544" style="zoom:50%;" />
>
> 文件global.c中的定义:
>
> <img src="第四次实验记录.assets/image-20211225150922964.png" alt="image-20211225150922964" style="zoom:50%;" />

### 8.4 初始化信号量

在Main.c中的kernel_main()里有一个for循环，对所有进程进行初始化；可以将信号量的初始化语句添加在for循环之后：

> <img src="第四次实验记录.assets/image-20211225151848128.png" alt="image-20211225151848128" style="zoom:50%;" />



# 9. 读者写者实现代码

### 9.1 读者优先

算法（在PPT的基础上加了一个锁max_reader）：

> <img src="第四次实验记录.assets/image-20211225145919475-16434491669153.png" alt="image-20211225145919475" style="zoom: 33%;" />

代码：

> 读者：
>
> <img src="第四次实验记录.assets/image-20211226131610328.png" alt="image-20211226131610328" style="zoom:50%;" />
>
> 写者：
>
> <img src="第四次实验记录.assets/image-20211226131616865.png" alt="image-20211226131616865" style="zoom:50%;" />

### 9.2 写者优先

实现参考：

> <img src="第四次实验记录.assets/image-20211225153244890.png" alt="image-20211225153244890" style="zoom:50%;" />

代码：

> 读者：
>
> <img src="第四次实验记录.assets/image-20211226131631157.png" alt="image-20211226131631157" style="zoom:50%;" />
>
> 写者：
>
> <img src="第四次实验记录.assets/image-20211226131638111.png" alt="image-20211226131638111" style="zoom:50%;" />

### 9.3 解决饿死问题——读写公平的算法

算法(PPT基础上加入了限制最大读者数的信号量max_reader)：

> <img src="第四次实验记录.assets/image-20211225145937483-16434491754554.png" alt="image-20211225145937483" style="zoom:50%;" />

代码：

> 读者：
>
> <img src="第四次实验记录.assets/image-20211226131654020.png" alt="image-20211226131654020" style="zoom:50%;" />
>
> 写者：
>
> <img src="第四次实验记录.assets/image-20211226131702768.png" alt="image-20211226131702768" style="zoom:50%;" />

### 9.4 打印

前文提到了解决乱码问题，可以借助disp_color和char[]进行打印。

> <img src="第四次实验记录.assets/image-20211226031203164.png" alt="image-20211226031203164" style="zoom:50%;" />





当然最后封装打印函数——在合适的时候重复调用，直接展示部分代码吧：

> <img src="第四次实验记录.assets/image-20211226030115572.png" alt="image-20211226030115572" style="zoom:50%;" />
>
> 读者优先的读者中，在进入、读文件、退出时，进程都有print_readxxxxx语句，都是经过封装过的打印函数。
>
> 封装函数：
>
> <img src="第四次实验记录.assets/image-20211226030235237.png" alt="image-20211226030235237" style="zoom:50%;" />



至于进程F：

**逻辑为**：

判断进程A\B\C\D\E是否有正在运行的，如果有就把has_running置为1；并且根据这个进程的类型；是读还是写；进行输出；最后休眠一小段时间（如同周期性任务一样）。

> <img src="第四次实验记录.assets/image-20211226030343752.png" alt="image-20211226030343752" style="zoom:50%;" />
>
> <img src="C:\Users\10702\AppData\Roaming\Typora\typora-user-images\image-20211226030441953.png" alt="image-20211226030441953" style="zoom:50%;" />

### 9.5 更多的其他修改

为了实现读者写者问题的模拟，还需要不断地继续修改初始化部分、调度算法、时钟中断处理程序，直接以代码截图+少量说明为主。

**数据结构：**

> <img src="第四次实验记录.assets/image-20211226031025687.png" alt="image-20211226031025687" style="zoom:50%;" />

**kernel_main初始化部分**：

初始化进程数据结构的新变量，设置tick，后面要根据tick消耗时间片（即休眠）。

> <img src="第四次实验记录.assets/image-20211226030612857.png" alt="image-20211226030612857" style="zoom:50%;" />

**调度算法**：这个调度算法简单、无错、公平。

> <img src="第四次实验记录.assets/image-20211226030823437.png" alt="image-20211226030823437" style="zoom:50%;" />

**时钟中断处理程序**：代码说明见注释

> <img src="第四次实验记录.assets/image-20211226030915256.png" alt="image-20211226030915256" style="zoom:50%;" />

**周期性任务随机休眠**：

> <img src="第四次实验记录.assets/image-20211226031127466.png" alt="image-20211226031127466" style="zoom:50%;" />

**全局变量部分**：

> 
>

# 10.Git记录(开发过程)

一部分git记录  :(   这写OS多是一件霉事/美逝啊~

> （开发原型）也是最终程序：
>
> <img src="第四次实验记录.assets/image-20211226130904863.png" alt="image-20211226130904863" style="zoom: 33%;" />
>
> <img src="C:\Users\10702\AppData\Roaming\Typora\typora-user-images\image-20211226025938712.png" alt="image-20211226025938712" style="zoom:50%;" />



# 11.遇到的bug

太多太多太多了，比如没有修改kernel.asm里的sys_call，没有搞懂调度算法和时钟中断模块就改了调度算法……已经没必要详细记了，报告已经够长了。

一定要注意边写边跑，确定哪些新写的代码是合适的、兼容的！否则写一堆，报一个奇怪的bug——NMI、General Protection等等，根本不知道哪儿错了，一定要注意用好git等版本控制工具！



<img src="第四次实验记录.assets/image-20211225145524297.png" alt="image-20211225145524297" style="zoom:50%;" />

# 12.读者写者参考

> 参考1：https://www.cnblogs.com/wkfvawl/p/11538431.html ;[操作系统——读者写者问题](https://www.cnblogs.com/wkfvawl/p/11538431.html)
>
> 参考2:https://blog.csdn.net/william_munch/article/details/84256690
>
> 参考3:[操作系统中读者与写者问题 - 程序员大本营 (pianshen.com)](https://www.pianshen.com/article/44761002166/)
>
> 参考4:https://m.linuxidc.com/Linux/2017-05/144292.htm 
>
> 参考5：老师的PPT
>
> （感谢你们拯救菜鸡QAQ！）
>
> 参考6：《orange's 一个操作系统的实现》(第二版) 第六章、第七章



# 13.运行效果见运行结果文件夹



###### 14. 你看不到我！这写OS，多是一件美逝啊~

