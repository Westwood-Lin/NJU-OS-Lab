# 						第一次操作系统实验报告

### 	作者

​																		191850036 冯亚林 软件学院



### 	目录

[TOC]

# 1.实验目标



### 1.1 安装Linux虚拟机

我在南大开源镜像站里下载了ubuntu镜像：ubuntu-18.04.6-desktop-amd64.iso文件，然后在VMware里创建了64位的、ubuntu18.04操作系统的虚拟机; 其中虚拟机配置如下：

<img src=".\assets\vmconfig.png" alt="vmconfig" style="zoom:50%;" />



附：

##### I.南大开源镜像站网址：

​	http://mirror.nju.edu.cn/

##### II.amd64：

​	**x86-64**是“**64位的x86指令集**”的简写。该指令集由AMD设计，1999年由AMD发布，2000年发布了完整标准，后来由AMD、Intel、VIA分别实现。这个AMD版本的64位指令集**向前兼容**32位的x86指令集。苹果、RPM包管理、Arch Linux称之为**“x86-64”或“x86_64”**，甲骨文和微软称之为**“x64”**，BSD和其他Linux发行版称之为**“amd64”**。

Intel在AMD 64发布之前就发布了IA-64架构，用于Itanium处理器家族，**不兼容x86指令集**，后来甲骨文、Redhat、微软都宣布停止支持IA-64。（Intel先搞出来了64位的指令集架构，但是不兼容32位的指令集系统，所以市场反响非常差劲）

Intel后来推出了Intel 64，与AMD64基本相同但有细节上的区别。虽然跟AMD64基本就一样，但是Intel一直在营销上把AMD贬为自家产品的仿制品，不承认使用了AMD的技术，于是Intel给AMD64另起了个名字叫“EM64T”，并且在文档里对其指令集的起源只字不提。媒体讽刺此事，给EM64T起了个外号叫“iAMD64”。再后来Intel就干脆把EM64T改名叫Intel 64了。

所以是AMD 64成为了x86-64的实际标准，怎么说都行。



作者：中型世界主义路灯
链接：https://www.zhihu.com/question/28194051/answer/1714710341
来源：知乎



### 1.2 安装 GNU Make 和 GCC

make的安装非常简单

终端输入：

```bash
sudo apt install make
```



但何不用更好的方式？

以下方式可以同时安装gcc，g++，make等; 

```bash
sudo apt update 检查更新

sudo apt install build-essential

sudo apt install manpages-dev

gcc --version 检验gcc是否安装成功
```



##### I.apt和apt-get有什么区别？

通过 apt 命令，用户可以在同一地方集中得到所有必要的工具，apt 的主要目的是提供一种以「让终端用户满意」的方式来处理 Linux 软件包的有效方式。

apt 具有更精减但足够的命令选项，而且参数选项的组织方式更为有效。除此之外，它默认启用的几个特性对最终用户也非常有帮助。例如，可以在使用 apt 命令安装或删除程序时看到进度条。

不仅广大 Linux 发行商都在推荐 apt，它还提供了 Linux 包管理的必要选项。

最重要的是，apt 命令选项更少更易记，因此也更易用，所以没理由继续坚持 apt-get。

**总结：apt比apt-get更好，包管理更简单，而且软件发行商更推荐。**



##### II.GNU是什么

Unix 系统被发明之后，大家用的很爽。但是后来开始收费和商业闭源了。一个叫 Richard Stallman 的大叔觉得很不爽，于是发起 GNU 计划，模仿 Unix 的界面和使用方式，从头做一个开源的版本。然后他自己做了编辑器 Emacs 和编译器 GCC。

GNU 是一个计划或者叫运动。在这个旗帜下成立了 FSF，起草了 GPL 协议等。

接下来大家纷纷在 GNU 计划下做了很多的工作和项目，基本实现了当初的计划。包括核心的 gcc 和 glibc。但是 GNU 系统缺少操作系统内核。原定的内核叫 HURD，一直完不成。同时 BSD（一种 UNIX 发行版）陷入版权纠纷，x86 平台开发暂停。然后一个叫 Linus 的同学为了在 PC 上运行 Unix，在 Minix 的启发下，开发了 Linux。注意，Linux 只是一个系统内核，系统启动之后使用的仍然是 gcc 和 bash 等软件。Linus 在发布 Linux 的时候选择了 GPL，因此符合 GNU 的宗旨。

最后，大家突然发现，这玩意不正好是 GNU 计划缺的么。于是合在一起打包发布叫 GNU / Linux。然后大家念着念着省掉了前面部分，变成了 Linux 系统。实际上 Debian，RedHat 等 Linux 发行版中内核只占了很小一部分容量。



作者：匿名用户
链接：https://www.zhihu.com/question/319783573/answer/656033035
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



##### III.GCC是什么

gcc全称是GNU Compiler Collection，它是一个能编译多种语言的编译器。最开始gcc是作为C语言的编译器（GNU C Compiler），现在除了c语言，还支持C++、java、Pascal等语言。gcc支持多种硬件平台。gcc是GNU计划的核心套件，采取GPL协议。



##### IV.GNU Make是什么

GNU make是一个项目包的高效管理和构建工具，可以方便地编译、链接多个源代码文件，自动决定哪些源文件需要重新编译（即所谓的高效构建项目）; 它也可以用来卸载项目包; 

官网：https://www.gnu.org/software/make/



### 1.3 解决虚拟机和宿主机间的文件传输问题

文件传输可以通过共享文件夹、FTP等方式实现; 

但VMware上可以拖动文件进行文件传输（vmware tools里的功能），所以……真香！

*既然在本机上可以编辑代码，那就可以不用装Emacs这种编辑器了，嘿嘿。=>事实证明，我想多了*



最后我选择了在虚拟机里安装**轻量级的编辑器SASM**;

网址：http://dman95.github.io/SASM/english.html

别的不说，光是一个色彩鲜艳又好看的界面就足以给人写下去的动力。



### 1.4 安装 NASM

笔记：

**N**etwide **As**se**m**bler （简称 **NASM**）是一款基于Intel x86架构的汇编与反汇编软件。它可以用来编写16位（8086、80286等）、32位（IA-32)和64位（x86_64）的程序。 

它使用简化BSD协议，开源。



**方法一:命令行**

**sudo apt install nasm**

终端输入命令：nasm -version.输出版本信息就说明安装成功

**nasm --version**



**方法二：源码压缩包**（比较麻烦）

官网下载.tar.gz源码压缩包，传入虚拟机中解压，然后在解压文件夹下官方提供的 INSTALL 文件指导下安装; 

具体来说就是：

a.提前装make和一个C编译器; 

b.进入文件目录，执行以下文件：

​	sh configure

c.在终端的安装文件夹下输入

​	make 或者 make everything （包含make+文档）

d.最后输入

​	sudo make install/install_rdf/install everything

 e.输入

​	nasm --version 检验安装是否成功

### 1.5 安装 虚拟机bochs 和 bochs-sdl库

在Linux虚拟机上继续安装ISA级虚拟机bochs; （虚拟机上安装虚拟机，套娃了属于是）

Bochs是x86硬件平台的开源模拟器。

它的特点是可以通过本机的指令集模拟目标指令集，是一种ISA级的虚拟机。

虚拟机级别：ISA级虚拟机（通过模拟指令集实现一定的虚拟化功能）、硬件级虚拟机(需要一个Hypervisor、VMM，比如VMware)、操作系统级虚拟机（操作系统中添加一个虚拟化层）、运行时库(wine)、应用程序级（JVM)



##### **1.5.1 安装**

**方法一：命令行安装**

sudo apt install bochs

优点：简单方便; 

缺点：书上说这样安装没有调试功能，实际好像是有的; 



**方法二：下载源码压缩包**

输入命令

tar zxvf bochs-2.7.tar.gz 解压

cd bochs-2.7 进入文件夹

./configure --enable-debugger --enable-disasm (参数就是打开调试功能)



输入这个以后，**报错**：

ERROR: X windows gui was selected, but X windows libraries were not found

搜索后发现：需要安装xorg-dev包

sudo apt install xorg-dev

make

sudo make install



##### 1.5.2  源码安装的配置问题详解博客

配置问题：https://www.cnblogs.com/viviwind/archive/2012/12/21/2827581.html



##### 1.5.3  bochs安装特点

一开始想用源码安装，配置出问题以后感觉还是命令行安装更香，太省事了。而且，而且不同于《Orang's》书上的说法，我发现现在用apt命令安装的bochs一样有debugger; 



### 1.6 课程实验教学目标

​	本实验的重点在于熟悉和掌握：8086 寻址方式和指令系统，x86 汇编基础，以及 nasm和bochs 的实验平台搭建和使用。

实验平台搭建成功 √

8086寻址方式和指令系统 √

x86汇编基础 x => x86-64汇编基础√



### 1.7 Hello，OS

​	选择任意你喜欢的平台，参考 PPT 和《Orange's 一个操作系统的实现》, 搭建 nasm + bochs 实验平台，在该实验平台上编写汇编文件 boot.asm 并用 bochs 执行，显示 Hello OS 。 请提交运行截图和代码。



![image-20211021160527503](.\assets\hello,os.png)



前面几步已经完成了nasm+bochs环境搭建。现在只需：

照着书或者PPT编辑汇编代码文件boot.asm => 用nasm汇编生成boot.bin =>

创建虚拟软盘映像a.img => 用dd命令将boot.bin写入a.img => 

添加bochs的配置文件bochsrc => 把bochsrc、a.img、boot.bin放在同一目录下 => 在终端输入bochs启动; 



boot.asm文件：

<img src=".\assets\boot.asm_source.png" alt="boot.asm" style="zoom:50%;" />



nasm编译命令：

<img src=".\assets\nasm_compile.png" alt="nasm" style="zoom:50%;" />





```bash
 nasm boot.asm –o boot.bin		#使⽤nasm汇编boot.asm⽣成“操作系统”的⼆进制代码
 
 bximage		#输入以后开始“问答”
 fd				#默认好像是hadr disk，需要输入fd
 1.44			#默认也是1.44M，直接回车都行
 a.img			#默认也是叫a.img，直接回车都行
 
 dd if=boot.bin of=a.img bs=512 count=1 conv=notrunc		#将boot.bin文件内容写入软盘中
 
 #新建文本文件bochsrc并输入:

```

 <img src=".\assets\bochsrc.png" alt="bochsrc" style="zoom:50%;" />

```bash
#终端启动bochs
bochs
#没有显示Hello,OS!可能是因为处于debug模式，在终端输入c
c
#显示 Hello,OS!
```



### 1.8 大数运算要求

​	参考寻址方式和指令系统 PPT，熟悉汇编指令，用汇编语言（NASM）实现大整数 (超过 64位) 的加法和乘法。

![](.\assets\task.png)

![](.\assets\require.png)



来来回回写了几天，不想写笔记了，但又很重要。前面几天磨磨唧唧的，写的文档和注释比代码多了几倍，最后一天进入状态了，一天写了几百行，注释和文档倒是一点儿都不想写了。





# 2.大数运算实现笔记

## 2.0 IDE——SASM

写nasm已经很折磨了，总不至于还要用记事本写吧……

SASM是一个不错的工具。



## 2.1  分析

首先，我装的虚拟机是ubuntu18.04，是一个64位的linux系统。

**64位系统和32位系统的架构区别非常大**（包括寄存器位数、个数，某些命令，以及系统调用的命令和约定号！)，下面会专门有一些笔记。



其次，现在大数运算要求实现从 -10^20^ 到 10^20^ 的加减乘运算。

通过取对数计算，发现：

10^20^>2^64^

10^20^ < 2^71^ 

10^40^ < 2^134=128+6^



因此对于2个输入、1个加减法的结果、1个乘法的结果，我在数据区(.data)和声明区(.bss)准备了这样的空间：

数据区:

​	显然 tips 和 tipsLen 只是为了输出提示信息准备的变量； isNeg1 和 isNeg2 用于代表第一个数和第二个数的符号位；换行符 nextLine是为了打印换行而准备的，0AH是换行的ascii码；

<img src=".\assets\data_zone.png" alt="data_zone" style="zoom: 67%;" />



声明区:

​	因为是大数，最好用字符数组的形式，1个字节存大数的1位；

​	len1 和len2是第一个和第二个数的位数（也就是数组的长度），resb 代表预留1个字节的空间；1个字节无符号可以表示0~255，1个字节表示位数绰绰有余；

​	inputBuff 是输入缓冲区，50个字节绝对够用了；inputLen 是输入的字节数；

​	第一个数 firstPtr 和第二个数 secondPtr 是指向数组起始地址的指针 pointer; 使用时一定要记得“解引用”，即用QWORD[pointer]来获得指向地址的内容；

​	对于和与积的结果，我都是用了4个东西**(4元组)**来表示它们：

​	存储结果的**字符数组**、指向**首地址的指针**、运算结果数的**位数**、**符号位**

<img src=".\assets\declare_zone.png" alt="declare_zone" style="zoom:67%;" />



## 2.2  输入与输出：系统调用 或 调用C函数 printf

**△☆方法一：系统调用**(我使用的这种)

#### 2.2.1  系统调用实现read

首先搜索各种参考博客：

https://www.cnblogs.com/tongye/p/9830006.html

https://blog.csdn.net/u013043103/article/details/108580611

通过不断在csdn、知乎、stack overflow上搜索，我基本搞懂了64位系统下的系统调用逻辑；



然后查阅**64位系统的系统调用表**：

<img src=".\assets\x86_64_syscall.png" alt="image-20211022012934770" style="zoom:50%;" />



**系统调用read()用C语言函数形式写出来：**



```C
size_t read(int fildes,void *buf,size_t nbytes);
```

fildes 是文件描述符，**内核利用文件描述符来访问文件**，它是一个非负的整数，当打开现存文件或者新建一个文件时，都会返回一个文件描述符。有多少文件描述符取决于系统的配置情况，当一个程序开始运行时，它一般有 3 个已经打开的文件描述符：**标准输入 0；标准输出 1；标准错误 2**。

因为要使用read，从标准输入读取数据，第一个参数当然该默认为0；第二个参数是指向输入**缓冲区的首地址**，第三个参数是**最多读入的字节数**



**代码实现：**

<img src=".\assets\read_impl.png" alt="image-20211022224424143" style="zoom: 67%;" />

首先注意这里的**pusha和popa也是个人实现的**；64位系统下的寄存器太多了，pusha和popa开销太大，系统没有设计它们，而寄存器较少的32位系统下是有的。

其次 mov rax,0 是因为64位系统下**系统调用号的传递约定由rax寄存器负责**，要使用read，就将read的系统调用号0传入rax中。

mov rdi,0 是因为文件句柄0代表从标准输入流 stdin 中读取数据；也就是size_t read( int fildes,……) 这个函数里的第一个参数

还要注意**64位**系统下最终进行系统调用，是使用命令 **syscall**，对比 **32位下使用的 int 80h**



**使用read**：

在上图的read里，我们设置好了系统调用号和输入流，也就是说，要使用read，我们现在还差输入缓冲区buf和输入最大字节nbytes2个参数没有设置；

```C
size_t read(int fildes,void *buf,size_t nbytes);
```



rsi 寄存器约定负责传递第二个变量 void* buff，即输入缓冲区的首地址；

rdx 寄存器约定负责传递第三个变量，即最多读取的字节数；

![image-20211022224411684](.\assets\use_read.png)

注意有call就该有ret：主程序这里用了call，封装的read里就该有 ret；



#### 2.2.2  系统调用实现print

有了通过系统调用实现和使用read的经验，print的实现和使用就让人感到轻松；

C语言形式：

```C
size_t write(int fildes,const void *buf,size_t nbytes);
```

**实现：**

实现和read几乎一模一样，只不过系统调用号变为了1，同时第一个参数文件描述符也应该是1；

（个人觉得这其实是64位系统设计的一个目的：read就用2个0，write/print就用2个1，好记、方便）

<img src=".\assets\print_impl.png" alt="image-20211101144228404" style="zoom:80%;" />

**使用：**

使用print时也和使用read几乎一模一样，在上图的print实现里，我们设置好了系统调用号和输出流，接下来还差输出的首地址 buf 和输出字节数nbytes2个参数没有设置：

rsi 寄存器约定负责传递第二个变量 void* buff，即输出缓冲区的首地址；

rdx 寄存器约定负责传递第三个变量，即需要输出的字节数；

<img src=".\assets\use_print.png" alt="image-20211101144836906" style="zoom:67%;" />



#### **2.2.3 调用C函数**

在 nasm 中，还可以调用C的库函数。

这需要使用 extern 关键字，后面跟函数名称，以便在连接时将 C函数copy-paste到源代码中。比如使用C的printf：

```nasm
extern printf
```

然后调用printf:

![image-20211021233134172](.\assets\use_C_printf.png)

我们知道printf的形式是： printf("format string %s",ptr1);

约定寄存器rdi 的内容是第一个参数 格式控制串，rsi是对应格式控制符的参数；

相关介绍博客：

https://blog.csdn.net/qq_31917799/article/details/87930452

https://blog.csdn.net/sivolin/article/details/41895701



## 2.3  64位和32位的不同点

可以参考nasm官网的参考手册：https://nasm.us/docs.php

#### 2.3.1 系统调用号

64位系统下的系统调用号和32位系统下是不同的！

下图是64位的：



<img src=".\assets\x86_64_syscall.png" alt="image-20211022012934770" style="zoom: 67%;" />

以下是32位的：

<img src=".\assets\x86_32_syscall.png" alt="image-20211101150342620" style="zoom:67%;" />

read、write都不同，差距还是挺大的；



#### 2.3.2 寄存器/寄存器个数

![image-20211101150622044](.\assets\x86_64_registers.png)

上图为64位系统下的寄存器；可以通用的寄存器比32位的多了很多。

而且这张图也部分体现了：x86_64为什么可以兼容x86_32，AL/AH—AX—EAX—RAX；



#### 2.3.3  64位系统下没有pusha/popa

因为64位系统下的寄存器数量太多，如果都要pusha/popa，开销太大；



#### 2.3.4 指针/解引用

解引用时要注意，64位系统下，寄存器是64位，64 bit= 8 Byte=1 QWORD; 如果在**内存某单元和寄存器之间相互赋值**，可能要注意：

**[]**之前可能使用QWORD；

比如：

这里要将 rax 中的 **第一个字符数组的首地址**传给 指针 firstPtr 时，就要注意是 将QWORD[first] 修改；

![image-20211101151250990](.\assets\ref.png)

正如同 C语言声明指针，必须指明 指针指向数据的类型 后才能使用：

这里的firstPtr是指向某个字节的首地址，QWORD[]意思是不能只用1个字节，要以firstPtr为首地址，将8个字节连起来使用；



如果是32位系统，寄存器是32位的，可能需要使用的就是DWORD[]了。



## 2.4   64位系统下的寄存器约定

根据 nasm 官网的手册：https://nasm.us/docs.php

在PDF文件133页

#### 2.4.1 传参

对于从左到右的**整型** 参数，首先依次使用6个寄存器：

RDI, RSI, RDX, RCX, R8, and R9

更多的整形参数用 **栈** 传递。

rax、r10、r11会被**系统调用重置/摧毁**，在函数调用的**函数内部**是可用的，他们不需要保存; 

整形返回值被先后传递在 **rax和rdx**中。



浮点数会使用SSE寄存器传递，80位的long double型例外; 

浮点数会通过**XMM0到XMM7**这8个寄存器传递; 返回值是在寄存器XMM0和XMM1中; 

长整型用Stack传递，返回到ST0和ST1中; 

所有SSE和x87寄存器会在系统调用中被重置/摧毁。



64位Unix上，long是64位的，会使用整型寄存器传递; 

![image-20211101151958884](.\assets\64bit_nasm_interface.png)



## 2.5  主文件/主函数

**主文件组织 BigNum.asm：**

宏命令—数据定义区/声明区—代码区（主函数main）

**文件组织：**

Locate、MyAdd、MyTimes分别定义在同名.asm文件中

![image-20211101154249947](.\assets\files.png)

**main的主函数流程也非常简单：**

输出提示信息—输入2个大数—对输入进行处理(使用Locate)—调用加法并输出结果(MyAdd)—调用乘法并输出结果(MyTimes)—结束



输入输出没什么好讲的；在2.2里已经讲了UserIO的文件内容

<img src=".\assets\main.png" alt="image-20211101161351233" style="zoom:50%;" />

## 2.6  输入处理 Locate



如注释；从键盘输入的2个大数，是以字符串的形式存在；

Locate函数通过循环，设置好1个数的符号、（数字开始的）首地址；

<img src=".\assets\Locate.png" alt="image-20211101163145675" style="zoom: 67%;" />



设置符号：

<img src=".\assets\set_signal.png" alt="image-20211101163349900" style="zoom: 67%;" />

## 2.7  加减法实现 MyAdd

<img src=".\assets\MyAdd.png" alt="image-20211101170345739" style="zoom: 67%;" />



具体的代码实现感觉没有必要贴上来;

有一个问题就是： 193 + (-190) = 3 但我存在内存中的值会是 003 ;输出时需要做些处理;



## 2.8  乘法实现 MyTimes

同样，具体的代码实现感觉没有必要贴上来;

乘法的难点在于二重循环、mul指令和div指令、ascii码的偏移量

![image-20211101173751343](.\assets\MyTimes.png)



## 2.9  测试结果

见big_number文件夹下的TestCase



